---
import MainLayout from "../layouts/MainLayout.astro";
import parseFilename from "../utils/parseFilename";

const title = parseFilename(import.meta.url);
---

<MainLayout title={title}>
  <main>
    <h1>Shiny call-to-action button created using <span>@property</span></h1>
    <button>
      <span>Get unlimited access</span>
    </button>
  </main>
</MainLayout>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap");

  :root {
    --color-highlight: hsl(240, 100%, 50%);
    --color-highlight-subtle: hsl(240, 100%, 76%);

    --color-background: hsl(0, 0%, 0%);
    --color-background-subtle: hsl(0, 4%, 10%);

    --color-foreground: hsl(0, 0%, 100%);
  }

  @property --gradient-angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  @property --gradient-percent {
    syntax: "<percentage>";
    initial-value: 5%;
    inherits: false;
  }

  @property --gradient-shine {
    syntax: "<color>";
    initial-value: hsl(0, 0%, 100%);
    inherits: false;
  }

  button {
    --animation: rotate-gradient linear infinite;
    --animation-duration: 3s;
    --transition: 800ms cubic-bezier(0.25, 1, 0.5, 1);
    --shadow-size: 0.0625rem;

    position: relative;
    overflow: hidden;
    font-family: inherit;
    font-size: 1.5rem;
    line-height: 1.2;
    padding: 1.5rem 3rem;
    border-radius: 3rem;
    cursor: pointer;
    outline: 0.0625rem solid transparent;
    outline-offset: 0.5rem;
    color: var(--color-foreground);

    box-shadow: inset 0 0 0 var(--shadow-size) var(--color-background-subtle);
    transition: var(--transition);
    transition-property: --gradient-percent, --gradient-shine;
    border: 0.0625rem solid transparent;
    /* Show gradient only on border by covering it with linear gradient that is limited to padding-box */
    background:
      linear-gradient(var(--color-background), var(--color-background)) padding-box,
      conic-gradient(
          from var(--gradient-angle),
          transparent calc(50% - var(--gradient-percent) * 2),
          var(--color-highlight) calc(50% - var(--gradient-percent)),
          var(--gradient-shine) 50%,
          var(--color-highlight) calc(50% + var(--gradient-percent)),
          transparent calc(50% + var(--gradient-percent) * 2)
        )
        border-box;

    &::after,
    &::before,
    span::before {
      content: "";
      position: absolute;
      inset: 50%;
      translate: -50% -50%;
      pointer-events: none;
    }

    /* Add every animation twice to be able to slow them down */
    &,
    &::after,
    &::before {
      animation:
        var(--animation) var(--animation-duration),
        var(--animation) calc(var(--animation-duration) * 2.5) reverse paused;
      animation-composition: add;
    }

    /* Shimmer effect inside button */
    &::after {
      --animation: shimmer linear infinite;
      --offset: 26deg;

      width: 100%;
      aspect-ratio: 1;
      opacity: 0.6;
      background: linear-gradient(-50deg, transparent, var(--color-highlight), transparent);
      mask-image: radial-gradient(circle at top, transparent 46%, var(--color-background));
    }

    /* Dots pattern */
    &::before {
      --position: 0.125rem;
      --gap: calc(var(--position) * 2.5);
      --size: calc(100% - var(--shadow-size) * 5);

      width: var(--size);
      height: var(--size);
      opacity: 0.4;
      border-radius: inherit;
      background: radial-gradient(
          circle at var(--position) var(--position),
          var(--color-foreground) calc(var(--position) / 4),
          transparent 0
        )
        padding-box;
      background-size: var(--gap) var(--gap);
      background-repeat: space;
      /* Use mask to show dots only in circular sector */
      mask-image: conic-gradient(
        from calc(var(--gradient-angle) - 180deg),
        var(--color-background),
        transparent 10% 90%,
        var(--color-background)
      );
    }

    /* Highlight shine at bottom on hover  */
    span::before {
      --size: calc(100% + 1.25rem);

      width: var(--size);
      height: var(--size);
      opacity: 0;
      transition:
        opacity var(--transition),
        box-shadow var(--transition);
      box-shadow: inset 0 -0.8rem 2rem 0.25rem var(--color-highlight);
      animation: breathe linear infinite calc(var(--animation-duration) * 1.5);
    }

    /* Button states */

    &:is(:hover, :focus-visible) {
      --gradient-percent: 20%;
      --gradient-shine: var(--color-highlight-subtle);

      span::before {
        opacity: 1;
      }

      &,
      &::after,
      &::before {
        animation-play-state: running;
      }
    }

    &:focus-visible {
      outline-color: var(--color-foreground);
    }

    &:active {
      translate: 0 0.125rem;

      span::before {
        box-shadow: inset 0 -1rem 2.4rem 0.3rem var(--color-highlight);
      }
    }
  }

  /* Animations */

  @keyframes rotate-gradient {
    to {
      --gradient-angle: 360deg;
    }
  }

  @keyframes shimmer {
    from {
      rotate: calc(0 - var(--offset));
    }
    to {
      rotate: calc(360deg - var(--offset));
    }
  }

  @keyframes breathe {
    from,
    to {
      transform: scale(1);
    }

    50% {
      transform: scale(1.2);
    }
  }

  /* Other styles */

  body {
    --padding: 4rem;
    --max-width: 40ch;

    width: min(var(--max-width), 100% - var(--padding));
    margin-inline: auto;
    font-family: Inter, sans-serif;
    background-color: hsl(228, 71%, 3%);
    color: var(--color-foreground);
    font-optical-sizing: auto;
    -webkit-font-smoothing: antialiased;
  }

  main {
    text-align: center;
    padding-top: 25vh;
  }

  h1 {
    font-size: clamp(2rem, 4vw, 3rem);
    line-height: 1.1;
    text-wrap: pretty;
    margin-bottom: 2em;

    & > span {
      text-decoration: underline 0.08em wavy var(--color-highlight);
      text-underline-offset: clamp(0.5rem, 0.2rem + 1vw, 0.8rem);
      color: var(--color-highlight);
    }
  }
</style>
