---
import ArrowIcon from "../components/ArrowIcon.astro";
import MainLayout from "../layouts/MainLayout.astro";
import parseFilename from "../utils/parseFilename";

type Panel = {
  id: number;
  title: string;
  content: string;
  isExpanded: boolean;
};

const panels: Panel[] = [
  {
    id: 1,
    title: "Grid is awesome",
    content:
      "CSS Grid is awesome because it allows for two-dimensional layouts, simplifies complex designs, and enhances responsiveness. It offers powerful alignment control, intuitive syntax, and excellent browser support, making it an essential tool for modern web development.",
    isExpanded: true,
  },
  {
    id: 2,
    title: "It's full of neat tricks",
    content:
      'Using `grid-template-rows` in your CSS allows for smooth height transitions. In the provided code, the section element transitions its height from `1fr` to `0fr` when `aria-hidden="true"` is set, creating a smooth collapsing effect. This enhances user experience with clean, CSS-only animations.',
    isExpanded: false,
  },
  {
    id: 3,
    title: "Tell me more",
    content:
      "This page is structured with a main layout and dynamically renders each panel's content based on its state.",
    isExpanded: false,
  },
];

const title = parseFilename(import.meta.url);
---

<MainLayout title={title}>
  <main>
    <section>
      <h1>Going from 0 to auto - the easy way</h1>
      {
        panels.map((panel) => (
          <article>
            <button aria-expanded={panel.isExpanded} aria-controls={`panel${panel.id}-content`}>
              <header id={`panel${panel.id}-heading`}>
                <h3>{panel.title}</h3>
                <ArrowIcon isOpen={panel.isExpanded} />
              </header>
              <section
                id={`panel${panel.id}-content`}
                role="region"
                aria-hidden={!panel.isExpanded}
                aria-labelledby={`panel${panel.id}-heading`}
              >
                <p>
                  {panel.content
                    .split("`")
                    .map((text, index) => (index % 2 === 0 ? text : <code>{text}</code>))}
                </p>
              </section>
            </button>
          </article>
        ))
      }
    </section>
    <section>
      <h2>Other content here</h2>
      <p>
        This page contains a sprinkle of JavaScript. When a panel is clicked, the following happens:
      </p>
      <ul>
        <li>
          The panel's open state is toggled by updating
          <code>aria-expanded</code> and
          <code>aria-hidden</code> attributes
        </li>
        <li>
          The arrow icon transitions by toggling the <code>open</code> class on it.
        </li>
      </ul>
    </section>
  </main>
</MainLayout>

<script>
  const panels = document.querySelectorAll("article");

  panels.forEach((panel) => {
    panel.addEventListener("click", () => {
      const contentEl = panel.querySelector("section")!;
      const button = panel.querySelector("button")!;
      const svg = button.querySelector("svg")!;
      const isPanelOpen = button.getAttribute("aria-expanded") === "true";

      contentEl.setAttribute("aria-hidden", String(isPanelOpen));
      button.setAttribute("aria-expanded", String(!isPanelOpen));
      svg.classList.toggle("open", !isPanelOpen);
    });
  });
</script>

<style>
  @import url("https://fonts.googleapis.com/css2?family=DM+Mono&display=swap");

  :root {
    --padding-inline: clamp(4rem, 3vw, 6rem);
    --spacing-top: 4rem;
    --spacing-bottom: clamp(2rem, 3vw, 4rem);
    --card-padding: clamp(1.5rem, 3vw, 2.5rem);
  }

  body {
    background-image: linear-gradient(120deg, hsl(258, 69%, 28%), hsl(337, 76%, 33%));
    display: flex;
    place-content: start;
    place-items: center;
    flex-direction: column;
    overflow: hidden;
  }

  main {
    width: min(60ch, 100% - var(--padding-inline));
    margin-block-start: var(--spacing-top);
    margin-block-end: var(--spacing-bottom);
    padding: var(--card-padding);
    border-radius: 0.6rem;
    background-color: hsl(237, 21%, 17%);
    color: hsl(0, 0%, 96%);
    box-shadow: -0.1rem 0.1rem 0.8rem 0.4rem hsla(240, 17%, 8%, 0.5);
    overflow: scroll;

    & > section {
      margin-bottom: clamp(1rem, 2vw, 2rem);
    }
  }

  h1,
  h2,
  h3 {
    text-wrap: pretty;
    padding-bottom: 0.5rem;
    line-height: 1.3;
  }

  h1 {
    font-size: var(--fs-600);
    padding-bottom: 1rem;
    color: var(--color-primary);
  }

  h2 {
    font-size: var(--fs-600);
    color: var(--color-primary);
  }

  h3 {
    font-size: var(--fs-500);
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  p,
  ul {
    line-height: 1.6;
  }

  ul {
    padding-left: 1.5rem;
  }

  code {
    background-color: hsl(278, 86%, 6%);
    color: hsl(310, 88%, 43%);
    padding: 0.125rem 0.3rem;
    border-radius: 0.2rem;
    font-size: 0.9em;
    font-family: "DM Mono", monospace;
    text-wrap: nowrap;
  }

  article {
    --border-radius: 0.4rem;
    --border-width: 0.125rem;

    background-color: hsl(233, 17%, 21%);
    border: var(--border-width) solid hsl(253, 7%, 52%);
    border-block-width: calc(var(--border-width) / 2);

    &:first-of-type {
      border-top-width: var(--border-width);
      border-top-left-radius: var(--border-radius);
      border-top-right-radius: var(--border-radius);
    }

    &:last-of-type {
      border-bottom-width: var(--border-width);
      border-bottom-left-radius: var(--border-radius);
      border-bottom-right-radius: var(--border-radius);
    }

    & section {
      display: grid;
      grid-template-rows: 1fr;
      transition: grid-template-rows 240ms ease-in-out;

      & p {
        overflow: hidden;
      }

      &[aria-hidden="true"] {
        grid-template-rows: 0fr;
      }
    }
  }

  button {
    width: 100%;
    appearance: none;
    background: inherit;
    outline: none;
    padding: 1rem 1.6rem;
    text-align: start;
    border: none;
    color: inherit;
    font-size: inherit;
    cursor: pointer;

    &:focus-visible h3 {
      text-decoration: underline solid var(--color-primary) 0.3rem;
    }
  }
</style>
